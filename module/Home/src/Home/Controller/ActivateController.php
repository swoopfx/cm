<?php
namespace Home\Controller;

use Zend\Mvc\Controller\AbstractActionController;
use Zend\View\Model\ViewModel;
use Zend\Session\Container;
use Home\Entity\Activate;
use Users\Entity\InsuranceBrokerRegistered;
use CsnUser\Service\UserService;

/**
 *
 * @author otaba
 *        
 */
class ActivateController extends AbstractActionController
{

    private $entityManager;

    private $mailService;

    private $smsService;

    private $activationForm;

    private $activateLoginForm;

    private $brokerSetupService;

    /**
     */
    public function onDispatch(\Zend\Mvc\MvcEvent $e)
    {
        $response = parent::onDispatch($e);
        // $response = parent::on
        // $this->redirectPlugin()->redirectCondition();
        $this->layout()->setTemplate("activate-lay");
        
        return $response;
    }

    public function __construct()
    {}

    public function vateAction()
    {
        $em = $this->entityManager;
        
        $activateLoginForm = $this->activateLoginForm;
        $request = $this->getRequest();
        if ($request->isPost()) {
            $post = $request->getPost();
            $activateLoginForm->setData($post);
            $activateLoginForm->setValidationGroup(array(
                "details"
            ));
            
            if ($activateLoginForm->isValid()) {
                
                $data = $em->getRepository("Home\Entity\Activate")->findOneBy(array(
                    "details" => $activateLoginForm->getData()
                        ->getDetails()
                ));
                if ($data == NULL) {
                    // var_dump($activateLoginForm->getData()->getDetails());
                    $this->flashmessenger()->addErrorMessage("You are not authorized to access this page");
                    $this->redirect()->toRoute("activation");
                } else {
                    $activaetionSession = new Container("activatonSession");
                    $activaetionSession->isLogged = TRUE;
                    $activaetionSession->setExpirationSeconds(60 * 60);
                    $this->flashmessenger()->addSuccessMessage("Welcome to broker activation");
                    $this->redirect()->toRoute("activation/default", array(
                        "action" => "broker"
                    ));
                }
            }
        }
        $view = new ViewModel(array(
            "activateLoginForm" => $activateLoginForm
        ));
        return $view;
    }

    /**
     * 
     * @return \Zend\View\Model\ViewModel
     */
    public function brokerAction()
    {
        $em = $this->entityManager;
        $mailService = $this->mailService;
        $smsService = $this->smsService;
        $activateEntity = new Activate();
        $insuranceBrokerEntity = new InsuranceBrokerRegistered();
        $activationSession = new Container("activatonSession");
        
        if ($activationSession->isLogged == FALSE || $activationSession->isLogged == NULL) {
            
            $this->flashmessenger()->addErrorMessage("You are not authorized to take this action");
            $this->redirect()->toRoute("activation");
        }
        $activationForm = $this->activationForm;
        $request = $this->getRequest();
        $activationForm->bind($insuranceBrokerEntity);
        if ($request->isPost()) {
            $post = $request->getPost();
            $activationForm->setData($post);
            $activationForm->setValidationGroup(array(
                "brokerInfo" => array(
                    "user" => array(
                        "username",
                        "email"
                    ),
                    "idInduranceBoker"
                
                )
            ));
            if ($activationForm->isValid()) {
                $userEntity = $insuranceBrokerEntity->getUser();
                $subscriptionEntity = $insuranceBrokerEntity->getSubscription();
                $userEntity->setPassword(UserService::encryptPassword($this->autoGeneratedpassword())); // Auto Generated Password
                $userEntity->setIsProfiled(TRUE)
                    ->setEmailConfirmed(FALSE)
                    ->setProfiled(TRUE)
                    ->setRegistrationDate(new \DateTime())
                    ->setRole($em->find("CsnUser\Entity\Role", UserService::USER_ROLE_BROKER))
                    ->setRegistrationToken(md5(uniqid(mt_rand(), true)))
                    ->setState($em->find("CsnUser\Entity\State", UserService::USER_STATE_ENABLED));
                $insuranceBrokerEntity->setDateEntered(new \DateTime())
                    ->setActivationCode($this->brokerSetupService->generateActivationCode())
                    ->setBrokerUid($this->brokerSetupService->generateBrokerUid())
                    ->setUser($userEntity);
                
                 $this->brokerSetupService->setMonth($post["promoMonths"]);
                
                /**
                 * Generate the subscription account based on the amount of months selected
                 * send an email and sms to notify moth phone and email this sents a confirmation emailfor the user to
                 * create a n account for the company withoutn other details
                 * send tutotrials and configuration and copletion details to the customer
                 * Send all required information to be filled
                 */
                try {
                    
                    $fullLink = $this->url()->fromRoute('activation/default', array(
                        'action' => 'email-activate',
                        'id' => $userEntity->getRegistrationToken()
                    ), array(
                        'force_canonical' => true
                    ));
                    
                    $message = "Almost aboard IMAPP CM, please login to your email to confirm your account ";
                    
                    $smsService->setTo($userEntity->getUsername())
                        ->setMessage($message);
                    $smsService->send();
                    
                    /**
                     * Send aemail Confirmation email
                     * After email is confirmaed all configuration details and then sent
                     */
                    $imapLogo = $this->url()->fromRoute('welcome', array(), array(
                        'force_canonical' => true
                    )) . "images/logow.png";
                    
                    // $mailer = $this->mail;
                    
                    $var = [
                        'logo' => $imapLogo,
                        'confirmLink' => $fullLink
                    ];
                    
                    $mailMessage = $mailService->getMessage();
                    $mailMessage->addTo($userEntity->getEmail())
                        ->setFrom("info@imapp.ng", "IMAPP CM")
                        ->setSubject("IMAPP CM: Confirm Email");
                    $mailService->setTemplate('general-user-confirm-email', $var);
                    $mailService->send();
                    
                    $em->persist($insuranceBrokerEntity);
                    $em->flush();
                    
                    $this->flashmessenger()->addSuccessMessage("Account has successfully activated");
                    $this->redirect()->toRoute("activation/default", array(
                        "action" => "broker"
                    ));
                } catch (\Exception $e) {
                    $this->flashmessenger()->addErrorMessage("This Broker has been activated on the platform");
                    $this->redirect()->toRoute("activation/default", array(
                        "action" => "broker"
                    ));
                }
            }
        }
        $view = new ViewModel(array(
            "activationForm" => $activationForm
        ));
        return $view;
    }

    public function emailActivateAction()
    {
        /**
         * This jfunction creates a confuguration email
         *
         * @var Ambiguous $view
         */
        $view = new ViewModel();
        return $view;
    }

    private function autoGeneratedpassword()
    {
        $auto = "Simple123";
        return $auto;
    }

    public function setEntityManager($em)
    {
        $this->entityManager = $em;
        return $this;
    }

    public function setMailService($xserv)
    {
        $this->mailService = $xserv;
        return $this;
    }

    public function setSmsService($xserv)
    {
        $this->smsService = $xserv;
        return $this;
    }

    public function setActivationForm($form)
    {
        $this->activationForm = $form;
        return $this;
    }

    public function setActivateLoginForm($form)
    {
        $this->activateLoginForm = $form;
        return $this;
    }

    public function setBrokerSetupService($xserv)
    {
        $this->brokerSetupService = $xserv;
        return $this;
    }
}

