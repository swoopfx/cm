<?php
namespace Customer\Service;

use Customer\Entity\CustomerBroker;
use CsnUser\Service\UserService;
use GeneralServicer\Service\GeneralService;

/**
 *
 * @author swoopfx
 *        
 */
class ClientService
{

    private $entityManager;

    private $generalService;

    private $mailService;

    private $url;

    private $smsService;

    public function hydrateRegisterClient($clientEntity, $broker)
    {
        $em = $this->entityManager;
        $generalService = $this->generalService;
        $mailService = $this->mailService;
        $url = $this->url;
        $customerService = new CustomerService();
        
        $token = md5(uniqid(mt_rand(), true));
        $customerBroker = new CustomerBroker();
        $pincode = $customerService->pinCodeGenerator();
        $customerBroker->setBroker($broker);
        $customerBroker->setCustomer($clientEntity);
        
        $clientEntity->getUser()->setIsProfiled(TRUE);
        $clientEntity->getUser()->setRegistrationDate(new \DateTime());
        $clientEntity->getUser()->setEmailConfirmed(FALSE);
        $clientEntity->getUser()->setLanguage($em->find("CsnUser\Entity\Language", GeneralService::LANGUAGE_ENGLISH));
        $clientEntity->getUser()->setpassword(UserService::encryptPassword($pincode));
        $clientEntity->getUser()->setRegistrationToken($token);
        $clientEntity->getUser()->setRole($em->find("CsnUser\Entity\Role", UserService::USER_ROLE_CUSTOMER));
        $clientEntity->getUser()->setState($em->find('CsnUser\Entity\State', UserService::USER_STATE_DISABLED));
        $clientEntity->setAccountId($customerService->generateCustomerCode());
        $clientEntity->setAdministrator($em->find("", CustomerService::CUSTOMER_ADMIN_BROKER));
        $brokerLogoUrl = NULL;
        $confirmationlink = $url->fromRoute('client_defs', array(
            'action' => 'confirm-email',
            array(
                'id' => $clientEntity->getUser()
                    ->getRegistrationToken()
            )
        ), array(
            'force_canonical' => true
        ));
        $customerPin = $pincode;
        $brokerName = $broker->getCompanyName();
        
        try {
            $userEntity = $clientEntity->getUser();
            
            $var = array(
                "logo" => $brokerLogo,
                "brokerName" => $broker->getCompanyName(),
                "pin" => $pinCode,
                "username" => $userEntity->getUsername(),
                "loginUrl" => $this->urlViewHelper("client_login", array(
                    "brokerid" => $this->generalService->getBrokerCentralUid()
                ), array(
                    'force_canonical' => true
                )),
                $this->urlPulgin->fromRoute("client_login", array(
                    "brokerid" => $broker->getBrokerUid()
                )), // generate a canonoical url of the broker for customer to login
                "brokerSite" => $broker->getBrokerWebsite()
            );
            $message = $mailService->getMessage();
            $message->addTo($userEntity->getEmail())
                ->setFrom("info@imapp.ng", $broker->getCompanyName())
                ->setSubject("Welcome aboard " . $broker->getCompanyName());
            $mailService->setTemplate('general-customer-welcome-aboard', $var); // Tweek this
            $mailService->send();
            
            $em->persist($customerBroker);
            $em->persist($clientEntity);
            $mailService->send();
            $this->sendRegisterationNotificatio($pincode, $clientEntity->getUser()
                ->getUsername());
            $em->flush();
            
            return $clientEntity->getId();
        } catch (\Exception $e) {
            return NULL;
        }
    }

    private function sendRegisterationNotificatio($pin, $number)
    {
        // refine phone number
        $smsService = $this->smsService;
        $title = "IMAPP PIN";
        $message = "Your Pin Number is :" . $pin;
        $num = $smsService->refinePhoneNumber($number);
        $smsService->sendGeneralSms($num, $message, $title);
    }

    /**
     * This gets all Policy the customer has acquired
     */
    public function myPolicy()
    {}

    /**
     * Defines all Packages assigned to the customer
     */
    public function myPackages()
    {}

    /**
     * gets all Open Offer the customer has made
     */
    public function myOffer()
    {}

    /**
     * Shows all the proposals sent to the customer
     */
    public function myProposal()
    {}

    /**
     * Provides Risk the user might be open to
     * This is either auto generated by predictive analysis
     * or assigned by broker
     */
    public function myRisk()
    {}

    /**
     * Gets all claims the customer has made
     */
    public function myClaims()
    {}

    /**
     * shows alll messages sent by the Broker to the customer
     */
    public function myMessages()
    {}

    public function setEntityManager($em)
    {
        $this->entityManager = $em;
        return $this;
    }

    public function setGeneralService($serv)
    {
        $this->generalService = $serv;
        return $this;
    }

    public function setMailService($xserve)
    {
        $this->mailService = $xserve;
        return $this;
    }

    public function setUrl($url)
    {
        $this->url = $url;
        return $this;
    }

    public function setSMSservice($xserv)
    {
        $this->smsService = $xserv;
        
        return $this;
    }
}

